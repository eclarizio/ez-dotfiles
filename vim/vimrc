runtime bundle/vim-pathogen/autoload/pathogen.vim
execute pathogen#infect()

set nocompatible                            " not compatible with vi
filetype off                                " disable system ftdetect files
syntax on                                   " enable syntax highlighting
filetype plugin indent on                   " enable file type detection
set expandtab                               " expand tabs to spaces
set tabstop=2 softtabstop=2                 " number of spaces inserted for a tab
set shiftwidth=2                            " number of spaces inserted per level of indent
set incsearch                               " incremental searching
set cursorline                              " highlight screen line of the cursor
set scrolloff=3                             " always show 3 lines above/below cursor line
set number                                  " display line numbers
set showmatch                               " briefly displays matching bracket
set wildmode=longest,list                   " shell-like file completion
set wildignore=sharedfs/*                   " filter sharedfs out of command-t
set splitbelow                              " new splits open below
set splitright                              " new vsplits open to the right
set backspace=indent,eol,start              " intuitive backspacing
set ignorecase                              " case-insensitive searching
set smartcase                               " case-sensitive if expression contains capital
" set title                                   " set the terminal's title
set visualbell                              " no beeping
set directory=/tmp                          " keep swap files in one location
set textwidth=0                             " disable automatic line breaking
set nosmartindent                           " disable smart indenting
set wrap                                    " wrap long lines
set colorcolumn=120

set statusline=
set statusline+=%<\                         " cut at start
set statusline+=%2*[%n%H%M%R%W]%*\          " buffer number, and flags
set statusline+=%-40f\                      " relative path
set statusline+=%{fugitive#statusline()}    " git infos
set statusline+=%=                          " seperate between right- and left-aligned
set statusline+=%1*%y%*%*\                  " file type
set statusline+=%10(L(%l/%L)%)\             " line
set statusline+=%2(C(%v/125)%)\             " column
set statusline+=%P

set background=dark
colorscheme railscasts

" rspec integration
map ,t :call RunSpecFile()<CR>
map ,s :call RunNearestSpec()<CR>
map ,l :call RunLastSpec()<CR>

" vim helpers
map ,m :set number!<CR>
map ,p :set paste!<CR>

" O should not be so slow
set timeout timeoutlen=1000 ttimeoutlen=100

" configure ack
let g:AckAllFiles = 0
let g:AckCmd = 'ack --type-add ruby=.feature --ignore-dir=tmp --ignore-dir=log 2> /dev/null'
map <LocalLeader>aw :Ag '<C-R><C-W>'

" hash rocket
imap <C-L> <SPACE>=><SPACE>

" configure ctrl-p
map <silent> <LocalLeader>t :CtrlP<CR>
let g:ctrlp_user_command = 'mdfind -onlyin %s -name . | egrep -v "target/|log/|sharedfs/"'

" ctrl-p
let g:ctrlp_working_path_mode = ''
let g:ctrlp_max_height = '30'
let g:ctrlp_max_files = '1000000000'
let g:ctrlp_max_depth = '100'
let g:ctrlp_user_command = 'mdfind -onlyin %s -name .'

" retag
map <silent> <LocalLeader>rt :!/opt/local/bin/ctags -R --exclude=".git\|.svn\|log\|tmp\|db\|pkg" --extra=+f<CR>


" NERD Tree
map <silent> <LocalLeader>nt :NERDTreeToggle<CR>
map <silent> <LocalLeader>nr :NERDTree<CR>
map <silent> <LocalLeader>nf :NERDTreeFind<CR>
map <F3> :NERDTreeToggle<CR>

" switch windows
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
map <C-h> <C-w>h

" clear search highlight
map <silent> <LocalLeader>nh :nohls<CR>
map <silent> <LocalLeader>\ :nohls<CR>

" comment/uncomment
map <silent> <LocalLeader>cc :TComment<CR>
map <silent> <LocalLeader>uc :TComment<CR>

" check ruby syntax
map <silent> <LocalLeader>rs :!ruby -c %<CR>

" highlight trailing whitespace
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd BufRead,InsertLeave * match ExtraWhitespace /\s\+$/
" Set up highlight group & retain through colorscheme changes
highlight ExtraWhitespace ctermbg=red guibg=red
autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
map <silent> <LocalLeader>ws :highlight clear ExtraWhitespace<CR>

au BufNewFile,BufRead *.hamlc set filetype=haml

" tab autocomplete or indent depending on context
function! InsertTabWrapper()
 let col = col('.') - 1
 if !col || getline('.')[col - 1] !~ '\k'
   return "\<tab>"
 else
   return "\<c-p>"
 endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" spec support
function! GuessSpecCommand()
  if executable("rspec")
    return "bundle exec rspec"
  else
    return "bundle exec spec"
  endif
endfunction

function! RunSpecFile()
  if InSpecFile()
    let t:last_spec_file_command = GuessSpecCommand() . " " . @% . " -cfn "
  endif

  call RunLastSpecFile()
endfunction

function! RunNearestSpec()
  if InSpecFile()
    let t:last_nearest_spec_command = GuessSpecCommand() . " " . @% . " -cfn -l " . line(".")
  endif

  call RunLastNearestSpec()
endfunction

function! RunLastSpec()
  call RunSpecs()
endfunction

function! InSpecFile()
  return match(expand("%"), "_spec.rb$") != -1
endfunction

function! RunLastNearestSpec()
  if exists("t:last_nearest_spec_command")
    call SetLastSpecCommand(t:last_nearest_spec_command)
    call RunSpecs()
  endif
endfunction

function! RunLastSpecFile()
  if exists("t:last_spec_file_command")
    call SetLastSpecCommand(t:last_spec_file_command)
    call RunSpecs()
  endif
endfunction

function! RunSpecs()
  if exists("t:last_spec_command")
    execute ":w\|!clear && echo " . t:last_spec_command . " && echo && " . t:last_spec_command
  endif
endfunction

function! SetLastSpecCommand(command)
  let t:last_spec_command = a:command
endfunction

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RENAME CURRENT FILE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <leader>n :call RenameFile()<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" PROMOTE VARIABLE TO RSPEC LET
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! PromoteToLet()
  :normal! dd
  " :exec '?^\s*it\>'
  :normal! P
  :.s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  :normal ==
endfunction
:command! PromoteToLet :call PromoteToLet()
:map <leader>p :PromoteToLet<cr>
